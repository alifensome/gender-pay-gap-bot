service: gender-pay-gap-bot-2
frameworkVersion: "3"
useDotenv: true

# plugins:
# - serverless-plugin-include-dependencies # Docs https://www.npmjs.com/package/serverless-plugin-include-dependencies

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221

  # you can overwrite defaults here
  #  stage: dev
  region: eu-west-2

custom:
  gpgDataTableName: GpgData # Ref with ${self:custom.gpgDataTableName}

package:
  excludeDevDependencies: true # Required for https://www.npmjs.com/package/serverless-plugin-include-dependencies
  individually: true
  exclude:
    - ./**
  include:
    - ./dist/**

functions:
  getCompanyByCompanyId:
    handler: dist/api/getCompanyHandler.getCompanyByCompanyId
    events:
      - httpApi:
          path: /company/{id}
          method: get
    package:
      include:
        - ./dist/**
        - data/twitterAccountData/twitterUserData-prod.json
        - data/twitterAccountData/twitterUserData-test.json
        - data/companies_GPG_Data.json
        - node_modules/**

  getCompanyByTwitterId:
    handler: dist/api/getCompanyHandler.getCompanyByTwitterId
    events:
      - httpApi:
          path: /company/twitterId/{id}
          method: get
    package:
      include:
        - ./dist/**
        - data/twitterAccountData/twitterUserData-prod.json
        - data/twitterAccountData/twitterUserData-test.json
        - data/companies_GPG_Data.json
        - node_modules/**

  getCompanyByTwitterHandle:
    handler: dist/api/getCompanyHandler.getCompanyByTwitterHandle
    events:
      - httpApi:
          path: /company/twitterHandle/{handle}
          method: get
    package:
      include:
        - ./dist/**
        - data/twitterAccountData/twitterUserData-prod.json
        - data/twitterAccountData/twitterUserData-test.json
        - data/companies_GPG_Data.json
        - node_modules/**

  tweetGpg:
    handler: dist/tweetGPG/handler.handler
    role: TweetSqsProcessorRole
    environment:
      TWITTER_API_KEY: ${env:TWITTER_API_KEY}
      TWITTER_API_SECRET: ${env:TWITTER_API_SECRET}
      TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}
      TWITTER_BEARER_TOKEN: ${env:TWITTER_BEARER_TOKEN}
      TWITTER_USER_ID: ${env:TWITTER_USER_ID}
      TABLE_NAME: ${self:custom.gpgDataTableName}
      # MIN_GPG: "10"
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TweetQueue
              - Arn
          batchSize: 1
          maximumBatchingWindow: 60
    package:
      include:
        - ./dist/**
        - data/twitterAccountData/twitterUserData-prod.json
        - data/twitterAccountData/twitterUserData-test.json
        - data/companies_GPG_Data.json
        - node_modules/**

  handleTweetAtGpga:
    handler: dist/handleTweetAtGpga/handler.handler
    role: HandleTweetAtGpgaRole
    environment:
      TWITTER_API_KEY: ${env:TWITTER_API_KEY}
      TWITTER_API_SECRET: ${env:TWITTER_API_SECRET}
      TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}
      TWITTER_BEARER_TOKEN: ${env:TWITTER_BEARER_TOKEN}
      TWITTER_USER_ID: ${env:TWITTER_USER_ID}
      # MIN_GPG: "10"
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TweetAtGpgaQueue
              - Arn
          batchSize: 1
          maximumBatchingWindow: 60
    package:
      include:
        - ./dist/**
        - data/twitterAccountData/twitterUserData-prod.json
        - data/twitterAccountData/twitterUserData-test.json
        - data/companies_GPG_Data.json
        - node_modules/**

  tweetAllGpgTask:
    handler: dist/tweetAllGpgTask/handler.handler
    role: TweetAllGpgTaskRole
    environment:
      TABLE_NAME: ${self:custom.gpgDataTableName}
      IS_TEST: false
      # Prod account
      TWITTER_API_KEY: ${env:TWITTER_API_KEY}
      TWITTER_API_SECRET: ${env:TWITTER_API_SECRET}
      TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}
      TWITTER_BEARER_TOKEN: ${env:TWITTER_BEARER_TOKEN}
      # Test account
      TWITTER_READ_ACCOUNT_API_KEY: ${env:TWITTER_READ_ACCOUNT_API_KEY}
      TWITTER_READ_ACCOUNT_API_SECRET: ${env:TWITTER_READ_ACCOUNT_API_SECRET}
      TWITTER_READ_ACCOUNT_ACCESS_TOKEN: ${env:TWITTER_READ_ACCOUNT_ACCESS_TOKEN}
      TWITTER_READ_ACCOUNT_ACCESS_TOKEN_SECRET: ${env:TWITTER_READ_ACCOUNT_ACCESS_TOKEN_SECRET}
      TWITTER_READ_ACCOUNT_BEARER_TOKEN: ${env:TWITTER_READ_ACCOUNT_BEARER_TOKEN}
    events:
      - schedule:
          rate: cron(00 09,13 * * ? *)
          enabled: true
    package:
      include:
        - ./dist/**
        - data/twitterAccountData/twitterUserData-prod.json
        - data/twitterAccountData/twitterUserData-test.json
        - data/companies_GPG_Data.json
        - node_modules/**

  plotGpg5YearGraph:
    handler: dist/plotGpg5YearGraph/handler.handler
    environment:
      LD_PRELOAD: /var/task/node_modules/canvas/build/Release/libz.so.1

    layers:
      - arn:aws:lambda:eu-west-2:402504474878:layer:node14chartjsCanvas:1
      - arn:aws:lambda:eu-west-2:402504474878:layer:node14CanvasLib64:3
      - arn:aws:lambda:eu-west-2:402504474878:layer:canvas-nodejs:1
    package:
      include:
        - ./dist/**
        - assets/fonts/DejaVuSans.ttf
      exclude:
        - node_modules/**
        - data/twitterAccountData/twitterUserData-prod.json
        - data/twitterAccountData/twitterUserData-test.json
        - data/companies_GPG_Data.json

  listenerV2:
    handler: dist/listenerV2/handler.handler
    role: ListenerV2Role
    timeout: 900
    environment:
      SQS_QUEUE_URL: ${env:SQS_QUEUE_URL}
      SEARCH_QUERY_CHARACTER_LIMIT: 500
      # Prod account
      TWITTER_API_KEY: ${env:TWITTER_API_KEY}
      TWITTER_API_SECRET: ${env:TWITTER_API_SECRET}
      TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}
      TWITTER_BEARER_TOKEN: ${env:TWITTER_BEARER_TOKEN}
      # Test account
      TWITTER_READ_ACCOUNT_API_KEY: ${env:TWITTER_READ_ACCOUNT_API_KEY}
      TWITTER_READ_ACCOUNT_API_SECRET: ${env:TWITTER_READ_ACCOUNT_API_SECRET}
      TWITTER_READ_ACCOUNT_ACCESS_TOKEN: ${env:TWITTER_READ_ACCOUNT_ACCESS_TOKEN}
      TWITTER_READ_ACCOUNT_ACCESS_TOKEN_SECRET: ${env:TWITTER_READ_ACCOUNT_ACCESS_TOKEN_SECRET}
      TWITTER_READ_ACCOUNT_BEARER_TOKEN: ${env:TWITTER_READ_ACCOUNT_BEARER_TOKEN}
    events:
      - schedule:
          rate: rate(120 minutes)
          enabled: true
    package:
      include:
        - ./dist/**
        - data/twitterAccountData/twitterUserData-prod.json
        - data/twitterAccountData/twitterUserData-test.json
        - data/companies_GPG_Data.json
        - node_modules/**

resources:
  Resources:
    # SQS for queuing tweets.
    TweetQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "TweetQueue"
        MessageRetentionPeriod: 1209600 # 14 days retention.
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [TweetQueueDeadLetter, Arn]
          maxReceiveCount: 3
    # Dead letter queue for the above.
    TweetQueueDeadLetter:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "TweetQueueDeadLetter"
        MessageRetentionPeriod: 1209600 # 14 days retention.

    # SQS for queuing tweets which are at the GPGA.
    TweetAtGpgaQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "TweetAtGpgaQueue"
        MessageRetentionPeriod: 1209600 # 14 days retention.
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [TweetAtGpgaQueueDeadLetter, Arn]
          maxReceiveCount: 3
    # Dead letter queue for the above.
    TweetAtGpgaQueueDeadLetter:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "TweetAtGpgaQueueDeadLetter"
        MessageRetentionPeriod: 1209600 # 14 days retention.

    # EC2 for Tweet listener and queuer
    # Docs https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
    TweetListenerQueuer:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-0dd555eb7eb3b7c82 # Linux 2
        KeyName: GenderPayGapApp
        InstanceType: t2.nano
        SubnetId: subnet-7e54ad32
        SecurityGroupIds:
          - sg-88aeb6e5
        IamInstanceProfile:
          Ref: ListenerEC2Profile

    # Profile
    ListenerEC2Profile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        InstanceProfileName: ListenerEC2Profile
        Roles:
          - Ref: ListenerRole

    # Roles
    # https://www.serverless.com/framework/docs/providers/aws/guide/iam
    ListenerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ListenerRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ListenerRolePolicyName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/ec2/*:*:*"
                    - "arn:aws:logs:eu-west-2:402504474878:log-group:/var/log/*:*:*"
                    - "arn:aws:logs:eu-west-2:402504474878:log-group:*:*:*"
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [TweetAtGpgaQueue, Arn]

                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:ListObjectsV2
                    - s3:GetBucketLocation
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::alifensome-general-bucket/gpga/*

                - Effect: Allow
                  Action:
                    - s3:ListObjectsV2
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::alifensome-general-bucket

    TweetSqsProcessorRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: TweetSqsProcessorRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: TweetSqsProcessorRolePolicyName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes

                  Resource:
                    - Fn::GetAtt: [TweetQueue, Arn]
                # DynamoDB
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - "Fn::GetAtt": [GpgData, Arn]

    HandleTweetAtGpgaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: HandleTweetAtGpgaRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: HandleTweetAtGpgaRolePolicyName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes

                  Resource:
                    - Fn::GetAtt: [TweetAtGpgaQueue, Arn]

    ListenerV2Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ListenerV2Role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ListenerV2RolePolicyName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Cloudwatch
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [TweetQueue, Arn]
                # DynamoDB
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:GetItem
                  Resource:
                    - "Fn::GetAtt": [GpgData, Arn]

    TweetAllGpgTaskRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: TweetAllGpgTaskRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: TweetAllGpgTaskRolePolicyName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Cloudwatch
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                # Invoke Lambda
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource:
                    - "Fn::GetAtt": [PlotGpg5YearGraphLambdaFunction, Arn]

                # DynamoDB
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - "Fn::GetAtt": [GpgData, Arn]

    GpgData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.gpgDataTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk # Partition key is hash. The data is physically stored by this.
            KeyType: HASH
          - AttributeName: id # Id uniquely identifies within the partition. Range can be queried for greater than.
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
